@page "/register"
@using UserRegistrationApp.Data
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components
@inject IJSRuntime JSRuntime

<PageTitle>Create Account</PageTitle>

<div class="container-fluid vh-100 d-flex align-items-center justify-content-center">
    <div class="row w-100 justify-content-center">
        <div class="col-md-6 col-lg-4">
            <div class="card shadow-lg">
                <div class="card-header bg-primary text-white text-center">
                    <div class="mb-3">
                        <img src="logo.png" alt="Company Logo" class="logo-image" />
                    </div>
                    <h3><i class="fas fa-user-plus me-2"></i>Create Account</h3>
                </div>
                <div class="card-body p-4">
                    <EditForm Model="@userModel" OnValidSubmit="@HandleValidSubmit">
                        <DataAnnotationsValidator />
                        
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger" role="alert">
                                <i class="fas fa-exclamation-triangle me-2"></i>@errorMessage
                            </div>
                        }
                        
                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="alert alert-success" role="alert">
                                <i class="fas fa-check-circle me-2"></i>@successMessage
                            </div>
                        }

                        <div class="mb-3">
                            <label for="username" class="form-label">
                                <i class="fas fa-user me-2"></i>Username
                            </label>
                            <InputText id="username" 
                                     class="form-control" 
                                     @bind-Value="userModel.Username" 
                                     placeholder="Enter your username" />
                            <ValidationMessage For="@(() => userModel.Username)" class="text-danger small" />
                        </div>

                        <div class="mb-3">
                            <label for="email" class="form-label">
                                <i class="fas fa-envelope me-2"></i>Email Address
                            </label>
                            <InputText id="email" 
                                     type="email" 
                                     class="form-control" 
                                     @bind-Value="userModel.Email" 
                                     placeholder="Enter your email address" />
                            <ValidationMessage For="@(() => userModel.Email)" class="text-danger small" />
                        </div>

                        <div class="mb-4">
                            <label for="password" class="form-label">
                                <i class="fas fa-lock me-2"></i>Password
                            </label>
                            <div class="input-group">
                                <InputText id="password" 
                                         type="@(showPassword ? "text" : "password")" 
                                         class="form-control" 
                                         @bind-Value="userModel.Password" 
                                         placeholder="Enter your password" />
                                <button class="btn btn-outline-secondary" 
                                        type="button" 
                                        @onclick="TogglePasswordVisibility">
                                    <i class="fas @(showPassword ? "fa-eye-slash" : "fa-eye")"></i>
                                </button>
                            </div>
                            <ValidationMessage For="@(() => userModel.Password)" class="text-danger small" />
                            <div class="form-text">
                                Password must be at least 6 characters long
                            </div>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" 
                                    class="btn btn-create-account btn-md" 
                                    disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>Creating Account...</span>
                                }
                                else
                                {
                                    <i class="fas fa-user-plus me-2"></i>
                                    <span>Create Account</span>
                                }
                            </button>
                        </div>
                    </EditForm>

                    <div class="my-2"></div>
                    @*
                    <div class="text-center">
                        <p class="mb-0">Need help? 
                            <a href="mailto:support@userregistrationapp.com" class="text-decoration-none">Contact Support</a>
                        </p>
                    </div> *@
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private User userModel = new User();
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool showPassword = false;
    private bool isSubmitting = false;

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private async Task HandleValidSubmit()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
        
        if (string.IsNullOrWhiteSpace(userModel.Username) || 
            string.IsNullOrWhiteSpace(userModel.Email) || 
            string.IsNullOrWhiteSpace(userModel.Password))
        {
            errorMessage = "All fields are required.";
            return;
        }

        isSubmitting = true;
        StateHasChanged();

        try
        {
            // Simulate processing delay
            await Task.Delay(1500);
            
            // TODO: In Section C, we'll implement actual user registration logic
            successMessage = $"Account created successfully! Welcome, {userModel.Username}!";
            
            // Reset form after successful registration
            await Task.Delay(2000);
            userModel = new User();
            successMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"Account creation failed: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }
}