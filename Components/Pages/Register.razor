@page "/register"
@using UserRegistrationApp.Data
@using UserRegistrationApp.Models
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging
@inject ILoggerFactory LoggerFactory
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@rendermode InteractiveServer

<PageTitle>Create Account</PageTitle>

<div class="container-fluid vh-100 d-flex align-items-center justify-content-center">
    <div class="row w-100 justify-content-center">
        <div class="col-md-6 col-lg-4">
            <div class="card shadow-lg">
                <div class="card-header bg-primary text-white text-center">
                    <div class="mb-3">
                        <img src="logo.png" alt="Company Logo" class="logo-image" />
                    </div>
                    <h3><i class="fas fa-user-plus me-2"></i>Create Account</h3>
                </div>
                <div class="card-body p-4">
                    <EditForm Model="@userModel" OnValidSubmit="@HandleValidSubmit" FormName="RegisterForm" OnInvalidSubmit="@HandleInvalidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />
                        
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger" role="alert">
                                <i class="fas fa-exclamation-triangle me-2"></i>@errorMessage
                            </div>
                        }
                        
                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="alert alert-success" role="alert">
                                <i class="fas fa-check-circle me-2"></i>@successMessage
                            </div>
                        }

                        <div class="mb-3">
                            <label for="username" class="form-label">
                                <i class="fas fa-user me-2"></i>Username
                            </label>
                            <InputText id="username" 
                                     class="form-control" 
                                     @bind-Value="userModel.Username" 
                                     placeholder="Enter your username" />
                            <ValidationMessage For="@(() => userModel.Username)" class="text-danger small" />
                        </div>

                        <div class="mb-3">
                            <label for="email" class="form-label">
                                <i class="fas fa-envelope me-2"></i>Email Address
                            </label>
                            <InputText id="email" 
                                     type="email" 
                                     class="form-control" 
                                     @bind-Value="userModel.Email" 
                                     placeholder="Enter your email address" />
                            <ValidationMessage For="@(() => userModel.Email)" class="text-danger small" />
                        </div>

                        <div class="mb-4">
                            <label for="password" class="form-label">
                                <i class="fas fa-lock me-2"></i>Password
                            </label>
                            <div class="input-group">
                                <input id="password" 
                                       type="@(showPassword ? "text" : "password")" 
                                       class="form-control" 
                                       @bind="userModel.Password" 
                                       @bind:event="oninput"
                                       placeholder="Enter your password" />
                                <button class="btn btn-outline-secondary" 
                                        type="button" 
                                        @onclick="TogglePasswordVisibility">
                                    <i class="fas @(showPassword ? "fa-eye-slash" : "fa-eye")"></i>
                                </button>
                            </div>
                            <ValidationMessage For="@(() => userModel.Password)" class="text-danger small" />
                            <div class="form-text">
                                Password must be at least 6 characters long
                            </div>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" 
                                    class="btn btn-create-account btn-md" 
                                    disabled="@(isSubmitting || !IsFormValid())">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>Creating Account...</span>
                                }
                                else
                                {
                                    <i class="fas fa-user-plus me-2"></i>
                                    <span>Create Account</span>
                                }
                            </button>
                        </div>
                    </EditForm>

                    <div class="my-2"></div>
                    
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterRequest userModel = new RegisterRequest();
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool showPassword = false;
    private bool isSubmitting = false;
    private bool pendingInvalidSubmitLog = false;
    private ILogger _logger = null!;
    private EditContext? editContext;
    private bool isComponentRendered = false;

    protected override void OnInitialized()
    {
        _logger = LoggerFactory.CreateLogger("RegisterComponent");
        _logger.LogInformation("Register component initialized.");
        editContext = new EditContext(userModel);
        editContext.OnFieldChanged += (sender, args) => StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isComponentRendered = true;
            StateHasChanged();
        }

        if (pendingInvalidSubmitLog && isComponentRendered)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("console.log", 
                    $"Invalid form state: Username={userModel.Username ?? "null"}, Email={userModel.Email ?? "null"}, PasswordLength={userModel.Password?.Length ?? 0}");
            }
            catch (InvalidOperationException ex)
            {
                _logger.LogWarning(ex, "Could not log to console during prerender");
            }
            pendingInvalidSubmitLog = false;
            StateHasChanged();
        }
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
        _logger.LogInformation("Password visibility toggled. Now showing: {ShowPassword}", showPassword);
        StateHasChanged(); // This is the key fix!
    }

    private bool IsFormValid()
    {
        return editContext?.Validate() ?? false;
    }

    private async Task HandleValidSubmit()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
        isSubmitting = true;
        StateHasChanged();

        _logger.LogInformation("Submitting registration for email: {Email}, username: {Username}, password length: {PasswordLength}", 
            userModel.Email ?? "null", userModel.Username ?? "null", userModel.Password?.Length ?? 0);

        if (isComponentRendered)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("console.log", 
                    $"Form state: Username={userModel.Username}, Email={userModel.Email}, PasswordLength={userModel.Password?.Length ?? 0}");
            }
            catch (InvalidOperationException ex)
            {
                _logger.LogWarning(ex, "Could not log to console");
            }
        }

        try
        {
            var request = new HttpRequestMessage(HttpMethod.Post, "api/user/register")
            {
                Content = JsonContent.Create(userModel)
            };
            _logger.LogInformation("Request payload: {Payload}", System.Text.Json.JsonSerializer.Serialize(userModel));

            var response = await Http.SendAsync(request);
            _logger.LogInformation("Registration request sent. Status Code: {StatusCode}", response.StatusCode);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<RegisterResponse>();
                successMessage = result?.Message ?? "Account created successfully!";
                _logger.LogInformation("Registration successful for username: {Username}", result?.Username);
                await Task.Delay(2000);
                userModel = new RegisterRequest();
                editContext = new EditContext(userModel);
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Registration failed: {error} (Status Code: {response.StatusCode})";
                _logger.LogWarning("Registration failed with status code {StatusCode}: {Error}", response.StatusCode, error);
                if (string.IsNullOrEmpty(error))
                {
                    _logger.LogWarning("No error message returned from server for status code {StatusCode}", response.StatusCode);
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            _logger.LogError(ex, "Exception during registration");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
            _logger.LogInformation("Registration process completed.");
        }
    }

    private async Task HandleInvalidSubmit()
    {
        _logger.LogWarning("Invalid form submission attempted. Username: {Username}, Email: {Email}, PasswordLength: {PasswordLength}", 
            userModel.Username ?? "null", userModel.Email ?? "null", userModel.Password?.Length ?? 0);
        
        if (isComponentRendered)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("console.log", 
                    $"Invalid form state: Username={userModel.Username}, Email={userModel.Email}, PasswordLength={userModel.Password?.Length ?? 0}");
            }
            catch (InvalidOperationException ex)
            {
                _logger.LogWarning(ex, "Could not log to console during invalid submit");
                pendingInvalidSubmitLog = true;
            }
        }
        else
        {
            pendingInvalidSubmitLog = true;
        }

        errorMessage = "Please correct the errors in the form.";
        StateHasChanged();
    }
}