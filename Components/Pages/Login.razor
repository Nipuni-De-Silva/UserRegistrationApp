@page "/login"
@using UserRegistrationApp.Data
@using UserRegistrationApp.Data.Models
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging
@inject ILoggerFactory LoggerFactory
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Sign In - My Note Space</PageTitle>

<div class="auth-container">
    <div class="row w-100 justify-content-center d-flex align-items-center" style="min-height: 100vh;">
        <div class="col-md-6 col-lg-4">
            <div class="card shadow-lg border-0" style="border-radius: 15px;">
                <div class="card-body p-5">
                    <div class="text-center mb-4">
                        <img src="my-note-space-logo.jpeg" alt="My Note Space Logo" class="mb-3"
                            style="width: 60px; height: 60px; border-radius: 50%; box-shadow: 0 4px 15px rgba(0,0,0,0.2);" />
                        <h3 class="mb-2" style="color: #1e3a8a;"><i class="fas fa-sign-in-alt me-2"></i>Welcome Back
                        </h3>
                        <p class="text-muted small">Sign in to your My Note Space account</p>
                    </div>

                    <EditForm Model="@loginModel" OnValidSubmit="@HandleValidSubmit" FormName="LoginForm"
                        OnInvalidSubmit="@HandleInvalidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger" role="alert">
                                <i class="fas fa-exclamation-triangle me-2"></i>@errorMessage
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="alert alert-success" role="alert">
                                <i class="fas fa-check-circle me-2"></i>@successMessage
                            </div>
                        }

                        <div class="mb-3">
                            <label for="email" class="form-label">
                                <i class="fas fa-envelope me-2"></i>Email Address
                            </label>
                            <InputText id="email" type="email" class="form-control" @bind-Value="loginModel.Email"
                                placeholder="Enter your email address" />
                            <ValidationMessage For="@(() => loginModel.Email)" class="text-danger small" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">
                                <i class="fas fa-lock me-2"></i>Password
                            </label>
                            <div class="input-group">
                                <input id="password" type="@(showPassword ? "text" : "password")" class="form-control"
                                    @bind="loginModel.Password" @bind:event="oninput"
                                    placeholder="Enter your password" />
                                <button class="btn btn-outline-secondary" type="button"
                                    @onclick="TogglePasswordVisibility">
                                    <i class="fas @(showPassword ? "fa-eye-slash" : "fa-eye")"></i>
                                </button>
                            </div>
                            <ValidationMessage For="@(() => loginModel.Password)" class="text-danger small" />
                        </div>

                        <div class="mb-3 form-check">
                            <InputCheckbox id="rememberMe" class="form-check-input"
                                @bind-Value="loginModel.RememberMe" />
                            <label class="form-check-label" for="rememberMe">
                                Remember me
                            </label>
                        </div>

                        <div class="d-grid mb-3">
                            <button type="submit" class="btn btn-primary btn-lg" disabled="@isSubmitting"
                                style="border-radius: 8px;">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"
                                        aria-hidden="true"></span>
                                    <span>Signing In...</span>
                                }
                                else
                                {
                                    <i class="fas fa-sign-in-alt me-2"></i>
                                    <span>Sign In</span>
                                }
                            </button>
                        </div>
                    </EditForm>

                    <hr class="my-3">

                    <div class="text-center">
                        <p class="mb-0 text-muted small">
                            Don't have an account?
                            <a href="/register" class="text-decoration-none fw-bold" style="color: #007bff;">Create
                                Account</a>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .auth-container {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: linear-gradient(135deg, #e3e3f4 0%, #cddef7 100%);
        z-index: 1;
        overflow-y: auto;
    }

    .form-control {
        background: rgba(239, 246, 255, 0.9);
        border: 2px solid #3b82f6;
        border-radius: 8px;
        transition: all 0.3s ease;
    }

    .form-label {
        color: #1e40af;
        font-weight: 600;
        margin-bottom: 8px;
        text-shadow: 0 1px 2px rgba(255, 255, 255, 0.5);
    }

    .form-control:focus {
        background: white;
        border-color: #1d4ed8;
        box-shadow: 0 0 0 0.2rem rgba(59, 130, 246, 0.25);
    }

    .btn-primary {
        background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
        border: none;
        border-radius: 8px;
        padding: 12px 24px;
        font-weight: 600;
        transition: all 0.3s ease;
        color: white;
    }

    .btn-primary:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 15px rgba(59, 130, 246, 0.4);
        background: linear-gradient(135deg, #2563eb 0%, #1e40af 100%);
    }

    .form-check-input:checked {
        background-color: #3b82f6;
        border-color: #3b82f6;
    }

    /* Override link color to standard blue */
    a {
        color: #007bff !important;
    }
</style>

@code {
    private ILogger<Login> logger = default!;
    private LoginRequest loginModel = new();
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool showPassword = false;
    private bool isSubmitting = false;

    protected override void OnInitialized()
    {
        logger = LoggerFactory.CreateLogger<Login>();
        logger.LogInformation("Login component initialized.");
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private async Task HandleValidSubmit()
    {
        if (isSubmitting) return;

        isSubmitting = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            logger.LogInformation("Attempting login for user: {Email}", loginModel.Email);

            var response = await Http.PostAsJsonAsync("/api/user/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();

                if (result?.Success == true)
                {
                    successMessage = "Login successful! Redirecting to dashboard...";
                    logger.LogInformation("Login successful, starting redirect to dashboard");
                    StateHasChanged();

                    // Wait a moment and then navigate
                    await Task.Delay(1500);
                    logger.LogInformation("Redirecting to dashboard page");
                    Navigation.NavigateTo("/dashboard", forceLoad: true);
                }

                else
                {
                    errorMessage = result?.Message ?? "Login failed. Please check your credentials.";
                }
            }

            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                logger.LogError("Login failed with status {StatusCode}: {Error}", response.StatusCode, errorContent);
                errorMessage = "Login failed. Please check your email and password.";
            }
        }

        catch (Exception ex)
        {
            logger.LogError(ex, "Exception occurred during login");
            errorMessage = "An error occurred. Please try again later.";
        }

        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private void HandleInvalidSubmit()
    {
        logger.LogWarning("Invalid login form submission attempted");
    }
}

<style>
    .card {
        backdrop-filter: blur(10px);
        background: rgba(255, 255, 255, 0.98);
    }

    .form-control:focus {
        border-color: #007bff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    .btn-primary {
        background: linear-gradient(45deg, #007bff, #0056b3);
        border: none;
        transition: all 0.3s ease;
    }

    .btn-primary:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 15px rgba(0, 123, 255, 0.4);
    }

    .form-check-input:checked {
        background-color: #007bff;
        border-color: #007bff;
    }
</style>
