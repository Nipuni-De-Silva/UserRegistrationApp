@page "/dashboard"
@using Microsoft.AspNetCore.Authorization
@using UserRegistrationApp.Data.Models
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using UserRegistrationApp.Data
@using Microsoft.EntityFrameworkCore
@attribute [Authorize]
@rendermode InteractiveServer
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>My Note Space - Dashboard</PageTitle>

<div class="dashboard-container">
    <!-- Header -->
    <div class="dashboard-header">
        <div class="header-left">
            <img src="my-note-space-logo.jpeg" alt="My Note Space" class="header-logo" />
            <h2 class="header-title">My Note Space</h2>
        </div>
        <div class="header-center">
            <div class="search-container">
                <i class="fas fa-search search-icon"></i>
                <input type="text" class="search-input" placeholder="Search notes..." @bind="searchQuery"
                    @oninput="OnSearchInput" />
                @if (!string.IsNullOrEmpty(searchQuery))
                {
                    <button class="search-clear" @onclick="ClearSearch">
                        <i class="fas fa-times"></i>
                    </button>
                }
            </div>
        </div>
        <div class="header-right">
            <button class="btn btn-outline-primary me-2" @onclick="ShowCreateNote">
                <i class="fas fa-plus me-1"></i>New Note
            </button>
            <button class="btn btn-outline-danger" @onclick="Logout">
                <i class="fas fa-sign-out-alt me-1"></i>Logout
            </button>
        </div>
    </div>

    <!-- Main Content Area -->
    <div class="dashboard-main">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="sidebar-section">
                <h6 class="sidebar-title">
                    <i class="fas fa-sticky-note me-2"></i>All Notes
                    <span class="notes-count">(@filteredNotes.Count)</span>
                </h6>

                @if (filteredNotes.Any())
                {
                    @for (int i = 0; i < Math.Min(displayLimit, filteredNotes.Count); i++)
                    {
                        var note = filteredNotes[i];
                        <div class="note-item @(selectedNote?.Id == note.Id ? "active" : "")" @onclick="() => SelectNote(note)">
                            <div class="note-title">@TruncateText(note.Title, 30)</div>
                            <div class="note-preview">@TruncateText(StripHtml(note.Content), 50)</div>
                            <div class="note-meta">
                                <span class="note-category"
                                    style="background-color: @GetCategoryColor(note.Category)">@note.Category</span>
                                <span class="note-date">@note.UpdatedAt.ToString("MMM dd")</span>
                            </div>
                        </div>
                    }

                    @if (filteredNotes.Count > 5)
                    {
                        <button class="expand-button" @onclick="ToggleNotesDisplay">
                            @if (showAllNotes)
                            {
                                <i class="fas fa-chevron-up me-1"></i>

                                <span>Show Less</span>
                            }
                            else
                            {
                                <i class="fas fa-chevron-down me-1"></i>

                                <span>Show More (@(filteredNotes.Count - 5))</span>
                            }
                        </button>
                    }
                }
                else
                {
                    <div class="empty-state">
                        <i class="fas fa-file-alt fa-2x mb-2"></i>
                        <p>No notes found</p>
                        @if (!string.IsNullOrEmpty(searchQuery))
                        {
                            <small>Try a different search term</small>
                        }
                        else
                        {
                            <button class="btn btn-sm btn-primary" @onclick="ShowCreateNote">Create New Note</button>
                        }
                    </div>
                }
            </div>

            <!-- Categories Section -->
            @if (categories.Any())
            {
                <div class="sidebar-section">
                    <h6 class="sidebar-title">
                        <i class="fas fa-folder me-2"></i>Categories
                    </h6>
                    @foreach (var category in categories)
                    {
                        var categoryNotes = allNotes.Where(n => n.Category == category).ToList();
                        <div class="category-item">
                            <div class="category-header" @onclick="() => FilterByCategory(category)">
                                <span class="category-name">@category</span>
                                <span class="category-count">@categoryNotes.Count</span>
                            </div>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(selectedCategory))
                    {
                        <button class="btn btn-sm btn-outline-secondary mt-2" @onclick="ClearCategoryFilter">
                            <i class="fas fa-times me-1"></i>Clear Filter
                        </button>
                    }
                </div>
            }
        </div>

        <!-- Content Area -->
        <div class="content-area">
            @if (showCreateForm)
            {
                <!-- Create/Edit Note Form -->
                <div class="note-editor">
                    <div class="editor-header">
                        <h4>@(editingNote != null ? "Edit Note" : "Create New Note")</h4>
                        <div class="editor-actions">
                            <button type="button" class="btn btn-success me-2" @onclick="HandleSaveClick"
                                disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-1"></span>
                                }
                                <i class="fas fa-save me-1"></i>Save
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="HandleCancelClick">
                                <i class="fas fa-times me-1"></i>Cancel
                            </button>
                        </div>
                    </div>

                    <div class="editor-body">
                        <div class="form-group mb-3">
                            <label class="form-label">Title</label>
                            <input type="text" class="form-control" @bind="noteForm.Title" placeholder="Enter note title..."
                                maxlength="200" />
                        </div>

                        <div class="form-group mb-3">
                            <label class="form-label">Category</label>
                            <div class="category-selector">
                                <select class="form-select" @bind="noteForm.Category">
                                    <option value="General">General</option>
                                    <option value="Work">Work</option>
                                    <option value="Personal">Personal</option>
                                    <option value="Ideas">Ideas</option>
                                    <option value="Tasks">Tasks</option>
                                    <option value="Meeting Notes">Meeting Notes</option>
                                    <option value="Research">Research</option>
                                    <option value="Other">Other</option>
                                </select>
                                <small class="form-text text-muted">Select a category or choose "Other" to create a custom
                                    one</small>
                            </div>
                        </div>

                        <div class="form-group mb-3">
                            <label class="form-label">Content</label>
                            <textarea class="form-control content-textarea" @bind="noteForm.Content"
                                placeholder="Write your note content here..." rows="15"></textarea>
                        </div>
                    </div>
                </div>
            }
            else if (selectedNote != null)
            {
                <!-- View Note -->
                <div class="note-viewer">
                    <div class="note-viewer-header">
                        <div>
                            <h3 class="note-viewer-title">@selectedNote.Title</h3>
                            <div class="note-viewer-meta">
                                <span class="note-category me-2"
                                    style="background-color: @GetCategoryColor(selectedNote.Category)">@selectedNote.Category</span>
                                <small class="text-muted">
                                    Created: @selectedNote.CreatedAt.ToString("MMM dd, yyyy")
                                    @if (selectedNote.UpdatedAt != selectedNote.CreatedAt)
                                    {
                                        <span> â€¢ Updated: @selectedNote.UpdatedAt.ToString("MMM dd, yyyy")</span>
                                    }
                                </small>
                            </div>
                        </div>
                        <div class="note-actions">
                            <button class="btn btn-outline-primary me-2" @onclick="EditNote">
                                <i class="fas fa-edit me-1"></i>Edit
                            </button>
                            <button class="btn btn-outline-danger" @onclick="DeleteNote">
                                <i class="fas fa-trash me-1"></i>Delete
                            </button>
                        </div>
                    </div>
                    <div class="note-viewer-content">
                        @((MarkupString)selectedNote.Content)
                    </div>
                </div>
            }
            else
            {
                <!-- Welcome State -->
                <div class="welcome-state">
                    <div class="welcome-content">
                        <i class="fas fa-sticky-note fa-4x mb-3"></i>
                        <h3>Welcome to My Note Space</h3>
                        <p class="lead">Select a note from the sidebar to view it, or create a new note to get started.</p>
                        <button class="btn btn-primary btn-lg" @onclick="ShowCreateNote">
                            <i class="fas fa-plus me-2"></i>Create New Note
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    // State variables
    private List<NoteResponse> allNotes = new();
    private List<NoteResponse> filteredNotes = new();
    private List<string> categories = new();
    private NoteResponse? selectedNote;
    private CreateNoteRequest noteForm = new() { Category = "General" };
    private NoteResponse? editingNote;
    private string searchQuery = string.Empty;
    private string selectedCategory = string.Empty;
    private bool showCreateForm = false;
    private bool showAllNotes = false;
    private bool isSaving = false;
    private bool isInitialized = false;
    private int displayLimit => showAllNotes ? filteredNotes.Count : 5;

    protected override async Task OnInitializedAsync()
    {
        if (!isInitialized)
        {
            Console.WriteLine("Dashboard initialized, loading data...");
            await LoadNotes();
            await LoadCategories();
            isInitialized = true;
        }
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("Dashboard first render completed");
        }
        return Task.CompletedTask;
    }

    private async Task LoadNotes()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);

            if (string.IsNullOrEmpty(userId))
            {
                Console.WriteLine("User not authenticated");
                return;
            }

            allNotes = await DbContext.Notes
            .Where(n => n.UserId == userId && !n.IsDeleted)
            .OrderByDescending(n => n.UpdatedAt)
            .Select(n => new NoteResponse
            {
                Id = n.Id,
                Title = n.Title,
                Content = n.Content,
                Category = n.Category,
                CreatedAt = n.CreatedAt,
                UpdatedAt = n.UpdatedAt
            })
            .ToListAsync();

            FilterNotes();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading notes: {ex.Message}");
        }
    }

    private async Task LoadCategories()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);

            if (string.IsNullOrEmpty(userId))
            {
                return;
            }

            categories = await DbContext.Notes
            .Where(n => n.UserId == userId && !n.IsDeleted)
            .Select(n => n.Category)
            .Distinct()
            .ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading categories: {ex.Message}");
        }
    }

    private void FilterNotes()
    {
        filteredNotes = allNotes.Where(note =>
        {
            var matchesSearch = string.IsNullOrEmpty(searchQuery) ||
    note.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
    note.Content.Contains(searchQuery, StringComparison.OrdinalIgnoreCase);

            var matchesCategory = string.IsNullOrEmpty(selectedCategory) ||
    note.Category == selectedCategory;

            return matchesSearch && matchesCategory;
        }).OrderByDescending(n => n.UpdatedAt).ToList();

        StateHasChanged();
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;
        FilterNotes();
    }

    private void ClearSearch()
    {
        searchQuery = string.Empty;
        FilterNotes();
    }

    private void FilterByCategory(string category)
    {
        selectedCategory = selectedCategory == category ? string.Empty : category;
        FilterNotes();
    }

    private void ClearCategoryFilter()
    {
        selectedCategory = string.Empty;
        FilterNotes();
    }

    private void SelectNote(NoteResponse note)
    {
        selectedNote = note;
        showCreateForm = false;
        StateHasChanged();
    }

    private void ShowCreateNote()
    {
        noteForm = new CreateNoteRequest { Category = "General" };
        editingNote = null;
        showCreateForm = true;
        selectedNote = null;
        StateHasChanged();
    }

    private void EditNote()
    {
        if (selectedNote != null)
        {
            noteForm = new CreateNoteRequest
            {
                Title = selectedNote.Title,
                Content = selectedNote.Content,
                Category = selectedNote.Category
            };
            editingNote = selectedNote;
            showCreateForm = true;
            StateHasChanged();
        }
    }

    private Task TestEditor()
    {
        Console.WriteLine("TestEditor - No longer needed without JavaScript");
        return Task.CompletedTask;
    }

    private Task HandleFormatClick(string command)
    {
        Console.WriteLine($"Format functionality removed - command was: {command}");
        return Task.CompletedTask;
    }

    private async Task HandleSaveClick()
    {
        Console.WriteLine("Save button clicked!");
        await SaveNote();
    }

    private async Task HandleCancelClick()
    {
        Console.WriteLine("Cancel button clicked!");
        await CancelEdit();
    }

    private async Task CancelEdit()
    {
        Console.WriteLine("CancelEdit method called");
        showCreateForm = false;
        editingNote = null;
        noteForm = new CreateNoteRequest { Category = "General" };
        Console.WriteLine("Form cancelled and state updated");
        await InvokeAsync(StateHasChanged);
    }

    private async Task SaveNote()
    {
        Console.WriteLine("SaveNote method called");

        if (string.IsNullOrWhiteSpace(noteForm.Title))
        {
            Console.WriteLine("Title is empty");
            // Simple alert without JavaScript
            return;
        }

        if (string.IsNullOrWhiteSpace(noteForm.Content))
        {
            Console.WriteLine("Content is empty");
            // Simple validation without JavaScript
            return;
        }

        Console.WriteLine("Setting isSaving to true");
        isSaving = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);
            Console.WriteLine($"User ID: {userId}");

            if (string.IsNullOrEmpty(userId))
            {
                Console.WriteLine("User not authenticated");
                return;
            }

            bool isNewNote = editingNote == null;
            bool success = false;
            Console.WriteLine($"Is new note: {isNewNote}");

            if (editingNote != null)
            {
                Console.WriteLine("Updating existing note");
                // Update existing note
                var existingNote = await DbContext.Notes.FindAsync(editingNote.Id);
                if (existingNote != null && existingNote.UserId == userId)
                {
                    existingNote.Title = noteForm.Title;
                    existingNote.Content = noteForm.Content;
                    existingNote.Category = noteForm.Category;
                    existingNote.UpdatedAt = DateTime.UtcNow;

                    await DbContext.SaveChangesAsync();
                    success = true;
                    Console.WriteLine("Note updated successfully");
                }
            }
            else
            {
                Console.WriteLine("Creating new note");
                // Create new note
                var newNote = new Note
                {
                    Title = noteForm.Title,
                    Content = noteForm.Content,
                    Category = noteForm.Category,
                    UserId = userId,
                    CreatedAt = DateTime.UtcNow,
                    UpdatedAt = DateTime.UtcNow,
                    IsDeleted = false
                };

                DbContext.Notes.Add(newNote);
                await DbContext.SaveChangesAsync();
                success = true;
                Console.WriteLine("New note created successfully");
            }

            if (success)
            {
                Console.WriteLine("Reloading notes and categories");
                // Reload notes to get the updated list
                await LoadNotes();
                await LoadCategories();

                // If we created a new note, select it (it should be the most recent one)
                if (isNewNote && allNotes.Any())
                {
                    var newestNote = allNotes.OrderByDescending(n => n.CreatedAt).FirstOrDefault();
                    if (newestNote != null)
                    {
                        selectedNote = newestNote;
                        Console.WriteLine($"Selected newest note: {newestNote.Title}");
                    }
                }
                else if (editingNote != null)
                {
                    // For updated notes, keep the current selection but refresh the data
                    var updatedNote = allNotes.FirstOrDefault(n => n.Id == editingNote.Id);
                    if (updatedNote != null)
                    {
                        selectedNote = updatedNote;
                        Console.WriteLine($"Selected updated note: {updatedNote.Title}");
                    }
                }

                // Clear the form after successful save
                await CancelEdit();
                Console.WriteLine("Form cleared and state updated");
            }
            else
            {
                Console.WriteLine("Save operation failed");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in SaveNote: {ex.Message}");
        }
        finally
        {
            Console.WriteLine("Setting isSaving to false");
            isSaving = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task DeleteNote()
    {
        if (selectedNote == null) return;

        // Simple confirmation - you could enhance this with a modal later
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);

            if (string.IsNullOrEmpty(userId))
            {
                return;
            }

            var noteToDelete = await DbContext.Notes.FindAsync(selectedNote.Id);
            if (noteToDelete != null && noteToDelete.UserId == userId)
            {
                noteToDelete.IsDeleted = true;
                noteToDelete.UpdatedAt = DateTime.UtcNow;

                await DbContext.SaveChangesAsync();

                await LoadNotes();
                await LoadCategories();
                selectedNote = null;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting note: {ex.Message}");
        }
    }

    private void ToggleNotesDisplay()
    {
        showAllNotes = !showAllNotes;
        StateHasChanged();
    }

    private Task Logout()
    {
        // TODO: Implement logout functionality
        Console.WriteLine("Logout functionality will be implemented");
        return Task.CompletedTask;
    }

    private string TruncateText(string text, int maxLength)
    {
        if (string.IsNullOrEmpty(text) || text.Length <= maxLength)
            return text;
        return text.Substring(0, maxLength) + "...";
    }

    private string StripHtml(string html)
    {
        if (string.IsNullOrEmpty(html))
            return string.Empty;

        // Simple HTML stripping - in production, use a proper HTML parser
        return System.Text.RegularExpressions.Regex.Replace(html, "<.*?>", string.Empty);
    }

    private string GetCategoryColor(string category)
    {
        var colors = new Dictionary<string, string>
{
{ "General", "#3b82f6" }, // Blue
{ "Work", "#f59e0b" }, // Amber
{ "Personal", "#10b981" }, // Emerald
{ "Ideas", "#8b5cf6" }, // Violet
{ "Tasks", "#ef4444" }, // Red
{ "Meeting Notes", "#06b6d4" }, // Cyan
{ "Research", "#84cc16" }, // Lime
{ "Other", "#6b7280" } // Gray
};

        return colors.ContainsKey(category) ? colors[category] : "#6b7280"; // Default to gray
    }
}

<style>
    /* Override MainLayout constraints for full screen dashboard */
    ::deep html,
    ::deep body {
        margin: 0;
        padding: 0;
        height: 100vh;
        overflow: hidden;
    }

    ::deep .page {
        height: 100vh;
        overflow: hidden;
        margin: 0;
        padding: 0;
    }

    ::deep main {
        height: 100vh;
        overflow: hidden;
        margin: 0;
        padding: 0;
    }

    ::deep article {
        height: 100vh;
        overflow: hidden;
        margin: 0;
        padding: 0;
    }

    .dashboard-container {
        height: 100vh;
        width: 100vw;
        display: flex;
        flex-direction: column;
        background: linear-gradient(135deg, #e3e3f4 0%, #cddef7 100%);
        margin: 0;
        padding: 0;
        overflow: hidden;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        z-index: 1000;
    }

    .dashboard-header {
        background: rgba(227, 238, 250, 0.95);
        backdrop-filter: blur(10px);
        border-bottom: 1px solid rgba(59, 130, 246, 0.2);
        padding: 1rem 2rem;
        display: flex;
        align-items: center;
        justify-content: space-between;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .header-left {
        display: flex;
        align-items: center;
    }

    .header-logo {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        margin-right: 12px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .header-title {
        margin: 0;
        color: #1e3a8a;
        font-weight: 600;
        font-size: 1.1rem;
    }

    .header-center {
        flex: 1;
        max-width: 500px;
        margin: 0 2rem;
    }

    .search-container {
        position: relative;
        width: 100%;
    }

    .search-icon {
        position: absolute;
        left: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: #6b7280;
        font-size: 0.9rem;
    }

    .search-input {
        width: 100%;
        padding: 10px 12px 10px 35px;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        font-size: 0.9rem;
        transition: all 0.3s ease;
        background: white;
    }

    .search-input:focus {
        outline: none;
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .search-clear {
        position: absolute;
        right: 8px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: #6b7280;
        cursor: pointer;
        padding: 4px;
        border-radius: 4px;
    }

    .search-clear:hover {
        background: #f3f4f6;
        color: #374151;
    }

    .header-right {
        display: flex;
        align-items: center;
    }

    .dashboard-main {
        display: flex;
        flex: 1;
        overflow: hidden;
        height: calc(100vh - 80px);
        /* Subtract header height */
    }

    .sidebar {
        width: 320px;
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(10px);
        border-right: 1px solid rgba(59, 130, 246, 0.2);
        padding: 1.5rem;
        overflow-y: auto;
        box-shadow: 2px 0 10px rgba(0, 0, 0, 0.05);
        height: 100%;
    }

    .sidebar-section {
        margin-bottom: 2rem;
    }

    .sidebar-title {
        font-size: 0.9rem;
        font-weight: 600;
        color: #1e40af;
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid #e5e7eb;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .notes-count {
        font-size: 0.8rem;
        color: #6b7280;
        font-weight: normal;
    }

    .note-item {
        padding: 12px;
        border: 1px solid #e5e7eb;
        border-radius: 8px;
        margin-bottom: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        background: white;
    }

    .note-item:hover {
        border-color: #3b82f6;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.1);
    }

    .note-item.active {
        border-color: #3b82f6;
        background: rgba(59, 130, 246, 0.05);
        box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
    }

    .note-title {
        font-weight: 600;
        color: #1e40af;
        font-size: 0.9rem;
        margin-bottom: 4px;
    }

    .note-preview {
        font-size: 0.8rem;
        color: #6b7280;
        margin-bottom: 8px;
        line-height: 1.4;
    }

    .note-meta {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .note-category {
        color: white;
        padding: 2px 8px;
        border-radius: 12px;
        font-size: 0.7rem;
        font-weight: 500;
    }

    .note-date {
        font-size: 0.7rem;
        color: #9ca3af;
    }

    .expand-button {
        width: 100%;
        padding: 8px;
        background: none;
        border: 1px dashed #d1d5db;
        border-radius: 6px;
        color: #6b7280;
        font-size: 0.8rem;
        cursor: pointer;
        transition: all 0.3s ease;
        margin-top: 8px;
    }

    .expand-button:hover {
        border-color: #3b82f6;
        color: #3b82f6;
        background: rgba(59, 130, 246, 0.05);
    }

    .category-item {
        margin-bottom: 8px;
    }

    .category-header {
        padding: 8px 12px;
        background: #f8fafc;
        border: 1px solid #e2e8f0;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .category-header:hover {
        border-color: #3b82f6;
        background: rgba(59, 130, 246, 0.05);
    }

    .category-name {
        font-weight: 500;
        color: #1e40af;
        font-size: 0.85rem;
    }

    .category-count {
        background: #e2e8f0;
        color: #64748b;
        padding: 1px 6px;
        border-radius: 10px;
        font-size: 0.7rem;
    }

    .empty-state {
        text-align: center;
        padding: 2rem 1rem;
        color: #6b7280;
    }

    .empty-state i {
        color: #d1d5db;
    }

    .content-area {
        flex: 1;
        padding: 2rem;
        overflow-y: auto;
        background: rgba(255, 255, 255, 0.7);
        height: 100%;
    }

    .note-editor {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }

    .editor-header {
        background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
        color: white;
        padding: 1.5rem 2rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .editor-header h4 {
        margin: 0;
        font-weight: 600;
    }

    .editor-actions .btn {
        margin-left: 0.5rem;
    }

    .editor-body {
        padding: 2rem;
    }

    .form-label {
        color: #1e40af;
        font-weight: 600;
        margin-bottom: 8px;
    }

    .form-control,
    .form-select {
        background: rgba(239, 246, 255, 0.9);
        border: 2px solid #3b82f6;
        border-radius: 8px;
        transition: all 0.3s ease;
    }

    .form-control:focus,
    .form-select:focus {
        background: white;
        border-color: #1d4ed8;
        box-shadow: 0 0 0 0.2rem rgba(59, 130, 246, 0.25);
    }

    .content-textarea {
        min-height: 300px;
        resize: vertical;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-size: 14px;
        line-height: 1.6;
    }

    .note-viewer {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }

    .note-viewer-header {
        background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
        padding: 2rem;
        border-bottom: 1px solid #e2e8f0;
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
    }

    .note-viewer-title {
        color: #1e40af;
        margin: 0 0 0.5rem 0;
        font-weight: 600;
    }

    .note-viewer-meta {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .note-actions {
        display: flex;
        gap: 0.5rem;
    }

    .note-viewer-content {
        padding: 2rem;
        line-height: 1.6;
        color: #374151;
    }

    .welcome-state {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100%;
        text-align: center;
    }

    .welcome-content {
        max-width: 400px;
        color: #6b7280;
    }

    .welcome-content i {
        color: #3b82f6;
        opacity: 0.7;
    }

    .welcome-content h3 {
        color: #1e40af;
        margin: 1rem 0;
    }

    /* Button Styling */
    .btn-primary {
        background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
        border: none;
        border-radius: 8px;
        padding: 8px 16px;
        font-weight: 600;
        transition: all 0.3s ease;
        color: white;
    }

    .btn-primary:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 15px rgba(59, 130, 246, 0.4);
        background: linear-gradient(135deg, #2563eb 0%, #1e40af 100%);
    }

    .btn-outline-primary {
        border: 2px solid #3b82f6;
        color: #3b82f6;
        background: transparent;
        border-radius: 8px;
        padding: 8px 16px;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .btn-outline-primary:hover {
        background: #3b82f6;
        color: white;
        transform: translateY(-1px);
        box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);
    }

    .btn-outline-danger {
        border: 2px solid #ef4444;
        color: #ef4444;
        background: transparent;
        border-radius: 8px;
        padding: 8px 16px;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .btn-outline-danger:hover {
        background: #ef4444;
        color: white;
        transform: translateY(-1px);
        box-shadow: 0 4px 15px rgba(239, 68, 68, 0.3);
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .dashboard-header {
            flex-direction: column;
            gap: 1rem;
            padding: 1rem;
        }

        .header-center {
            margin: 0;
            max-width: 100%;
        }

        .dashboard-main {
            flex-direction: column;
        }

        .sidebar {
            width: 100%;
            max-height: 300px;
            border-right: none;
            border-bottom: 1px solid rgba(59, 130, 246, 0.2);
        }

        .content-area {
            padding: 1rem;
        }

        .editor-header {
            flex-direction: column;
            gap: 1rem;
            align-items: flex-start;
        }

        .note-viewer-header {
            flex-direction: column;
            gap: 1rem;
            align-items: flex-start;
        }
    }
</style>
